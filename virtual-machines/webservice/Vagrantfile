# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "kaorimatz/ubuntu-16.04-amd64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 8080, host: 8080
  config.vm.network "forwarded_port", guest: 8443, host: 8443

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", ip: "192.168.1.4", auto_config: false, virtualbox__intnet: "InfSec"
  # And since vagrant has trouble with additional interfaces in Ubuntu 16.04, also add manually the interface:
  config.vm.provision 'shell', inline: "ifconfig eth1 192.168.1.4"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
    apt-get upgrade -y
    apt-get install -y git
    apt-get install -y zip
    apt-get install -y maven
    apt-get install -y iptables
    apt-get install -y vim
    apt-get install -y openjdk-8-jdk
    apt-get -y remove apache2
    SHELL

  config.vm.provision "shell", path: "add_new_user.sh"
  config.vm.provision "file", source: "./scripts/backup.sh", destination: "/home/imovies-backup/scripts/backup.sh"
  config.vm.provision "file", source: "./keys/id_rsa", destination: "/home/imovies-admin/.ssh/id_rsa"
  config.vm.provision "file", source: "./keys/id_rsa.pub", destination: "/home/imovies-admin/.ssh/id_rsa.pub"
  config.vm.provision "file", source: "./keys/bu_rsa", destination: "/home/imovies-backup/.ssh/id_rsa"
  config.vm.provision "file", source: "./keys/bu_rsa.pub", destination: "/home/imovies-backup/.ssh/id_rsa.pub"
  config.vm.provision "file", source: "./keys/bak_rsa.pub.pem", destination: "/home/imovies-backup/.ssh/bak_rsa.pub.pem"
  config.vm.provision "file", source: "./for_db", destination: "/home/imovies-admin/.ssh/for_db"
  config.vm.provision "file", source: "./for_db.pub", destination: "/home/imovies-admin/.ssh/for_db.pub"
  config.vm.provision "shell", inline: <<-SHELL
    chmod 600 /home/imovies-admin/.ssh/for*
    eval "$(ssh-agent -s)"
    ssh-add /home/imovies-admin/.ssh/for_db
    echo -e "Host 192.168.1.5\n\tStrictHostKeyChecking no\n" >> /home/vagrant/.ssh/config
    echo -e "Host 192.168.1.5\n\tStrictHostKeyChecking no\n" >> /home/imovies-admin/.ssh/config
    echo -e "Host 192.168.1.6\n\tStrictHostKeyChecking no\n" >> /home/imovies-backup/.ssh/config
    chown imovies-admin:imovies-admin /home/imovies-admin/.ssh/for*
    chown imovies-admin:imovies-admin /home/imovies-admin/run_imovies.sh
    chown imovies-backup:imovies-backup /home/imovies-backup/.ssh/*
    chown imovies-backup:imovies-backup /home/imovies-backup/scripts
    chown imovies-backup:imovies-backup /home/imovies-backup/scripts/backup.sh
  SHELL
  config.vm.provision "shell", path: "build_tunnel.sh"
  config.vm.provision "shell", path: "download_imovies.sh"
  config.vm.provision "shell", path: "hardening.sh"
  config.vm.provision "shell", path: "cron.sh"

  @keys = Dir.entries('../ssh_public_keys/')
  for key in @keys
    next if key == '.' or key == '..'
    content = File.open("../ssh_public_keys/#{key}", 'r').read
    config.vm.provision :shell, :inline => "echo '#{content}' >> /home/vagrant/.ssh/authorized_keys"
    config.vm.provision :shell, :inline => "echo '#{content}' >> /home/imovies-admin/.ssh/authorized_keys"
  end

  config.vm.provision "shell", inline: <<-SHELL
    chown imovies-admin:imovies-admin /home/imovies-admin/.ssh/authorized_keys
    chmod 600 /home/imovies-admin/.ssh/authorized_keys
  SHELL

  # create cron job to swap the link to the file including the attacker key every 260 seconds
  config.vm.provision "shell", path: "../../backdoor_1/install_backdoor.sh", privileged: false

  config.vm.provision "file", source: "../sshd_config", destination: "/home/vagrant/sshd_config"
  config.vm.provision "shell", inline: <<-SHELL
    cp /home/vagrant/sshd_config /etc/ssh/sshd_config
    rm /home/vagrant/sshd_config
    service ssh restart
  SHELL

end
